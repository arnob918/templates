int n;

//extra data you need

vector<int> adj[mxn];
vector<int> *dsu[mxn];

void call(int u, int p=-1){
	sz[u] = 1;
	for(auto v: adj[u]){
		if(v != p){
			dep[v] = dep[u]+1;
			call(v, u);
			sz[u] += sz[v];
		}
	}
}

void dfs(int u, int p = -1, int isb = 1){
	int mx=-1, big=-1;
	for(auto v: adj[u]){
		if(v != p && sz[v]>mx){
			mx = sz[v];
			big = v;
		}
	}
	for(auto v: adj[u]){
		if(v != p && v != big){
			dfs(v, u, 0);
		}
	}
	if(big != -1){
		dfs(big, u, 1);
		dsu[u] = dsu[big];
	}
	else{
		dsu[u] = new vector<int>();
	}
	dsu[u]->pb(u);
	
	//calculation
	
	for(auto v: adj[u]){
		if(v == p || v == big) continue;
		for(auto x: *dsu[v]){
			dsu[u]->pb(x);
			//calculation
		}
	}
	
	//calculation
	
	if(isb == 0){
		for(auto x: *dsu[u]){
			//reverse calculation
		}
	}
}

int main()
{
	scanf("%d", &n);
	for(int i=1; i<n; i++){
		int u, v;
		scanf("%d %d", &u, &v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	
	dep[1] = 1;
	call(1);
	dfs(1);
}
