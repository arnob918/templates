struct point{
    long long int x, y;
    point(){}
    
    point(long long int qx, long long int qy) {x = qx, y = qy;}
    
    void read(){
		scanf("%lld %lld", &x, &y);
	}
} origin = point(0, 0);

point operator+(const point &u, const point &v) {return point(u.x + v.x, u.y + v.y);}
point operator-(const point &u, const point &v) {return point(u.x - v.x, u.y - v.y);}
point operator*(const point &u, const point &v) {return point(u.x * v.x - u.y * v.y, u.x * v.y + v.x * u.y);} //complex numbers  multiplication
point operator*(const point &u, long long int v) {return point(u.x*v, u.y*v);}
point operator*(long long int v, const point &u) {return point(u.x*v, u.y*v);}
bool operator != (const point &u, const point &v) {return !((u.x == v.x) && (u.y == v.y));}


bool operator < (const point &u, const point &v) {return u.x<v.x || (u.x==v.x && u.y<v.y);}

double length(point u){return sqrt(u.x*u.x*1.0 + u.y*u.y*1.0);}
double arg(point u){ assert(u != origin); return atan2(u.y, u.x);}

double angle_between(point l, point m, point r) {return abs(remainder(arg(l-m) - arg(r-m), 2.0 * acos(-1.0))); }//in radian

long long int dot(point u, point v) {return u.x * v.x + u.y * v.y;}
long long int cross(point u, point v) {return u.x * v.y - u.y * v.x;}
long long int cross3(point a, point b, point c){
	return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y);
}

void convexhull(vector<point>& a) {
    if (a.size() == 1)
        return;

    sort(a.begin(), a.end());
    point p1 = a[0], p2 = a.back();
    vector<point> up, down;
    up.push_back(p1);
    down.push_back(p1);
    for (int i = 1; i < (int)a.size(); i++) {
        if (i == (int)a.size() - 1 || cross3(p1, a[i], p2) < 0) {
            while (up.size() >= 2 && cross3(up[up.size()-2], up[up.size()-1], a[i])>=0)
                up.pop_back();
            up.push_back(a[i]);
        }
        if (i == (int)a.size() - 1 || cross3(p1, a[i], p2)>0) {
            while(down.size() >= 2 && cross3(down[down.size()-2], down[down.size()-1], a[i])<=0)
                down.pop_back();
            down.push_back(a[i]);
        }
    }

    a.clear();
    for (int i = 0; i < (int)up.size(); i++)
        a.push_back(up[i]);
    for (int i = down.size() - 2; i > 0; i--)
        a.push_back(down[i]);
}
